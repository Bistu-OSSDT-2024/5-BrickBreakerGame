import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

public class ww extends JPanel implements ActionListener, KeyListener
{
	
	   private final int WIDTH = 600, HEIGHT = 400;
	   private final int BRICK_COLUMNS = 10, BRICK_ROWS = 5;
	   private final int BRICK_WIDTH = WIDTH / BRICK_COLUMNS, BRICK_HEIGHT = 20;
	   private Timer timer;
	   private boolean running = true;
	   private int ballX = WIDTH / 2, ballY = HEIGHT / 2;
	   private int paddleX = WIDTH / 2;
	   private final int BALL_SIZE = 20, PADDLE_WIDTH = 100, PADDLE_HEIGHT = 10;
	   private int ballDeltaX = -2, ballDeltaY = -2; // 球的移动速度
	   private boolean[][] bricks = new boolean[BRICK_ROWS][BRICK_COLUMNS];
	   
	    private Color[][] brickColors; // 存储砖块颜色的二维数组
	   
	   public ww() {
		   //初始化砖块数组
		   for (int i = 0; i < BRICK_ROWS; i++) {
	           for (int j = 0; j < BRICK_COLUMNS; j++) {
	               bricks[i][j] = true;
	           }
	       }
		      // 初始化砖块颜色数组
	        brickColors = new Color[BRICK_ROWS][BRICK_COLUMNS];
	        Random random = new Random();
	        for (int i = 0; i < BRICK_ROWS; i++) {
	            for (int j = 0; j < BRICK_COLUMNS; j++) {
	                brickColors[i][j] = getRandomColor(); // 为每个砖块分配颜色并存储
	            }
	        }
	        
	       setPreferredSize(new Dimension(WIDTH, HEIGHT));
	       setBackground(Color.BLACK);
	       setFocusable(true);
	       addKeyListener(this);
	 
	      
	       timer = new Timer(6, this);
	       timer.start();
	   }
	 
	   private Random random = new Random(); // 创建一个随机数生成器实例
	// 绘制彩色砖块
	   private Color getRandomColor() {
	       // 生成随机颜色
	       return new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));
	   }
	   

	   // 游戏主循环
	   public void actionPerformed(ActionEvent e) {
	       if (running) {
	           ballX += ballDeltaX;
	           ballY += ballDeltaY;
	 
	           // 检测墙壁碰撞
	           if (ballX < 0 || ballX > WIDTH - BALL_SIZE) {
	               ballDeltaX *= -1;
	           }
	           if (ballY < 0) {
	               ballDeltaY *= -1;
	           }
	           // 检测挡板碰撞
	           if (ballY > HEIGHT - PADDLE_HEIGHT - BALL_SIZE) {
	               if (ballX > paddleX && ballX < paddleX + PADDLE_WIDTH) {
	                   ballDeltaY *= -1;
	               }
	           }
	           
	        // 检测砖块碰撞
	           collisionWithBricks();
	           
	           repaint();
	       }
	   }
	   
	   // 检测球与砖块的碰撞
	   private void collisionWithBricks() {
	       for (int i = 0; i < BRICK_ROWS; i++) {
	           for (int j = 0; j < BRICK_COLUMNS; j++) {
	               if (bricks[i][j]) {
	                   if (ballX > j * BRICK_WIDTH && ballX < j * BRICK_WIDTH + BRICK_WIDTH &&
	                       ballY > i * BRICK_HEIGHT && ballY < i * BRICK_HEIGHT + BRICK_HEIGHT) {
	                       bricks[i][j] = false; // 移除砖块
	                       ballDeltaY *= -1; // 反转球的方向
	                       break; // 退出内层循环
	                   }
	               }
	           }
	       }
	   }
	   
	   // 绘制游戏元素
	    protected void paintComponent(Graphics g) {
	        super.paintComponent(g);
	        g.setColor(Color.WHITE);
	        g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE); // 绘制球
	        g.fillRect(paddleX, HEIGHT - PADDLE_HEIGHT, PADDLE_WIDTH, PADDLE_HEIGHT); // 绘制挡板

	        // 使用预设颜色绘制每个砖块
	        for (int i = 0; i < BRICK_ROWS; i++) {
	            for (int j = 0; j < BRICK_COLUMNS; j++) {
	                if (bricks[i][j]) {
	                    g.setColor(brickColors[i][j]); // 从之前生成的颜色数组中获取颜色
	                    g.fillRect(j * BRICK_WIDTH, i * BRICK_HEIGHT, BRICK_WIDTH, BRICK_HEIGHT);
	                }
	            }
	        }
	    }

	   // 键盘事件处理
	   public void keyPressed(KeyEvent e) {
	       if (e.getKeyCode() == KeyEvent.VK_LEFT) {
	           paddleX -= 20;
	       }
	       if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
	           paddleX += 20;
	       }
	       // 防止挡板移出边界
	       paddleX = Math.max(paddleX, 0);
	       paddleX = Math.min(paddleX, WIDTH - PADDLE_WIDTH);
	   }
	 
	   public void keyReleased(KeyEvent e) {}

	   public void keyTyped(KeyEvent e) {}
	 
	   public static void main(String[] args) {
	       JFrame frame = new JFrame("打砖块游戏");
	       
	       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	       ww game = new ww();
           frame.getContentPane().add(game);
	       frame.pack();
	       frame.setLocationRelativeTo(null);
	       frame.setVisible(true);
	    // 启动游戏（如果游戏逻辑中有启动游戏的额外步骤）
	       game.startGame();
	    }
	     
	    // 在 BreakoutGame 类中，你可以添加一个方法来启动游戏
	    public void startGame() {
	       running = true; // 假设有一个变量 running 控制游戏运行
	   }
}
